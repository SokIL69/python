# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
# и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

caption = 'Основы языка Python. Урок 8. Домашнее задание 3.\n'
print(caption)

class OwnError(Exception):

    def __init__(self, txt):
        self.txt = txt


def is_digit(string):
    """
    Проверяет является ли строка числом.
    Проверяются целые числа, числа с плавающей запятой, и отрицательные числа.
    """

    if string.isdigit():
       return True
    else:
        try:
            float(string)
            return True
        except ValueError:
            return False
        
numbers = []

while True:
    try:
        number = input("Введите число (для выхода нажмите 'q'):  ")
        if number.upper() == 'Q' or number.upper() == 'Й':
            break
        #if number.isdigit(): # проверяет только целые положительные числа
        if is_digit(number):
            numbers.append(number)
            continue
        else:
            raise OwnError("Error! Введённая строка не является числом.")
    except (OwnError) as err:
        print("Необходимо ввести число.")



print(numbers)
